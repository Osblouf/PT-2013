CCS PCM C Compiler, Version 4.114, 93460303               04-nov.-13 18:07

               Filename: D:\GitHub\PT-2013\main.lst

               ROM used: 233 words (3%)
                         Largest free fragment is 2048
               RAM used: 14 (4%) at main() level
                         18 (5%) worst case
               Stack:    4 worst case (3 in main + 1 for interrupts)

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   0B4
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... /* 
....................   POUR INFO SUR CCS : http://www.personal.rdg.ac.uk/~stsgrimb/teaching/programming_pic_microcontrollers.pdf 
....................  
.................... */ 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES HS         //Highspeed Osc > 4mhz 
.................... #FUSES PUT        //Power Up Timer 
.................... #FUSES NOPROTECT  //Code not protected from reading 
.................... #FUSES NODEBUG    //No Debug mode for ICD 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD      //No EE protection 
....................  
.................... //utilisation du RS232 
.................... #use delay(clock=20000000) //fréquence 
*
0042:  MOVLW  03
0043:  SUBWF  2B,F
0044:  BTFSS  03.0
0045:  GOTO   050
0046:  MOVLW  2B
0047:  MOVWF  04
0048:  BCF    03.7
0049:  MOVF   00,W
004A:  BTFSC  03.2
004B:  GOTO   050
004C:  GOTO   04E
004D:  GOTO   04E
004E:  DECFSZ 00,F
004F:  GOTO   04D
0050:  RETURN
.................... #use rs232(baud=57600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... //definition de la pin output 
.................... #define PIN_OUTPUT_LED PIN_B2 
.................... #define PIN_OUTPUT_80HZ PIN_B4 
....................  
.................... //fonction d'envoi RC5 
.................... void RC5(char c); 
.................... void LED_1(void); 
.................... void LED_0(void); 
....................  
.................... //variable globale 
.................... short int bo = 0; 
....................  
.................... //fonction des interruptions 
.................... #INT_TIMER0 
.................... void timer_irq(void) { 
....................    set_timer0(193); 
*
002F:  MOVLW  C1
0030:  MOVWF  01
....................    if (bo == 0) 
0031:  BTFSC  27.0
0032:  GOTO   039
....................    { 
....................      output_high(PIN_OUTPUT_80HZ); 
0033:  BSF    03.5
0034:  BCF    06.4
0035:  BCF    03.5
0036:  BSF    06.4
....................      bo = 1; 
0037:  BSF    27.0
....................    } 
....................    else 
0038:  GOTO   03E
....................    { 
....................      output_low(PIN_OUTPUT_80HZ); 
0039:  BSF    03.5
003A:  BCF    06.4
003B:  BCF    03.5
003C:  BCF    06.4
....................      bo = 0; 
003D:  BCF    27.0
....................    } 
.................... } 
....................  
.................... //fonction main 
003E:  BCF    0B.2
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   01B
.................... void main(void) 
.................... { 
*
00B4:  CLRF   04
00B5:  BCF    03.7
00B6:  MOVLW  1F
00B7:  ANDWF  03,F
00B8:  MOVLW  15
00B9:  BSF    03.5
00BA:  MOVWF  19
00BB:  MOVLW  A6
00BC:  MOVWF  18
00BD:  MOVLW  90
00BE:  BCF    03.5
00BF:  MOVWF  18
00C0:  BCF    27.0
00C1:  BSF    03.5
00C2:  BSF    1F.0
00C3:  BSF    1F.1
00C4:  BSF    1F.2
00C5:  BCF    1F.3
00C6:  MOVLW  07
00C7:  MOVWF  1C
....................   //ressources 
....................   char c; 
....................  
....................   set_tris_b(0x00); 
00C8:  MOVLW  00
00C9:  MOVWF  06
....................   output_b(0x00); 
00CA:  CLRF   06
00CB:  BCF    03.5
00CC:  CLRF   06
....................   //output_c(0x00); 
....................   //set_tris_c(0x80); 
....................  
....................   //Gestion des interruptions d tmr0 
....................   setup_timer_0(RTCC_INTERNAL|RTCC_8_BIT|RTCC_DIV_1); 
00CD:  BSF    03.5
00CE:  MOVF   01,W
00CF:  ANDLW  C7
00D0:  IORLW  08
00D1:  MOVWF  01
....................   enable_interrupts(INT_TIMER0); 
00D2:  BCF    03.5
00D3:  BSF    0B.5
....................   enable_interrupts(GLOBAL); 
00D4:  MOVLW  C0
00D5:  IORWF  0B,F
....................  
....................   //output_b(0x01); 
....................    
....................   //pin output à 1 (led éteinte) 
....................   output_high(PIN_OUTPUT_LED); 
00D6:  BSF    03.5
00D7:  BCF    06.2
00D8:  BCF    03.5
00D9:  BSF    06.2
....................  
....................   //boucle 
....................   while(1) 
....................   { 
....................     //récupération de l'octet 
....................     if(kbhit()) 
00DA:  BTFSS  0C.5
00DB:  GOTO   0E3
....................     { 
....................         c = fgetc(); 
00DC:  BTFSS  0C.5
00DD:  GOTO   0DC
00DE:  MOVF   1A,W
00DF:  MOVWF  28
....................         //envoi à la LED 
....................         RC5(c); 
00E0:  MOVF   28,W
00E1:  MOVWF  29
00E2:  GOTO   07F
....................     } 
....................  
....................     //repassage en mode repos 
....................     output_high(PIN_OUTPUT_LED); 
00E3:  BSF    03.5
00E4:  BCF    06.2
00E5:  BCF    03.5
00E6:  BSF    06.2
....................   } 
00E7:  GOTO   0DA
.................... } 
....................  
....................  
.................... //fonction d'envoi RC5 
.................... void RC5(char c) 
.................... { 
00E8:  GOTO   0E8
....................   //deux premiers bits 
....................   LED_1(); 
*
007F:  CALL   051
....................   LED_1(); 
0080:  CALL   051
....................  
....................   //bits à 0 
....................   LED_0(); 
0081:  CALL   068
....................   LED_0(); 
0082:  CALL   068
....................   LED_0(); 
0083:  CALL   068
....................   LED_0(); 
0084:  CALL   068
....................  
....................   //envoi du message : 
....................   if(c & (1 << 7)) 
0085:  BTFSS  29.7
0086:  GOTO   089
....................     LED_1(); 
0087:  CALL   051
....................   else 
0088:  GOTO   08A
....................     LED_0(); 
0089:  CALL   068
....................  
....................   if(c & (1 << 6)) 
008A:  BTFSS  29.6
008B:  GOTO   08E
....................     LED_1(); 
008C:  CALL   051
....................   else 
008D:  GOTO   08F
....................     LED_0(); 
008E:  CALL   068
....................  
....................   if(c & (1 << 5)) 
008F:  BTFSS  29.5
0090:  GOTO   093
....................     LED_1(); 
0091:  CALL   051
....................   else 
0092:  GOTO   094
....................     LED_0(); 
0093:  CALL   068
....................  
....................   if(c & (1 << 4)) 
0094:  BTFSS  29.4
0095:  GOTO   098
....................     LED_1(); 
0096:  CALL   051
....................   else 
0097:  GOTO   099
....................     LED_0(); 
0098:  CALL   068
....................  
....................   if(c & (1 << 3)) 
0099:  BTFSS  29.3
009A:  GOTO   09D
....................     LED_1(); 
009B:  CALL   051
....................   else 
009C:  GOTO   09E
....................     LED_0(); 
009D:  CALL   068
....................  
....................   if(c & (1 << 2)) 
009E:  BTFSS  29.2
009F:  GOTO   0A2
....................     LED_1(); 
00A0:  CALL   051
....................   else 
00A1:  GOTO   0A3
....................     LED_0(); 
00A2:  CALL   068
....................  
....................   if(c & (1 << 1)) 
00A3:  BTFSS  29.1
00A4:  GOTO   0A7
....................     LED_1(); 
00A5:  CALL   051
....................   else 
00A6:  GOTO   0A8
....................     LED_0(); 
00A7:  CALL   068
....................  
....................   if(c & (1 << 0)) 
00A8:  BTFSS  29.0
00A9:  GOTO   0AC
....................     LED_1(); 
00AA:  CALL   051
....................   else 
00AB:  GOTO   0AD
....................     LED_0(); 
00AC:  CALL   068
....................  
....................   output_high(PIN_OUTPUT_LED); 
00AD:  BSF    03.5
00AE:  BCF    06.2
00AF:  BCF    03.5
00B0:  BSF    06.2
....................  
.................... } 
00B1:  BCF    0A.3
00B2:  BCF    0A.4
00B3:  GOTO   0E3 (RETURN)
....................  
.................... //fonction bit à 1 
.................... void LED_1(void) 
.................... { 
....................   output_high(PIN_OUTPUT_LED); 
*
0051:  BSF    03.5
0052:  BCF    06.2
0053:  BCF    03.5
0054:  BSF    06.2
....................   delay_us(889); 
0055:  MOVLW  07
0056:  MOVWF  2A
0057:  MOVLW  7E
0058:  MOVWF  2B
0059:  CALL   042
005A:  DECFSZ 2A,F
005B:  GOTO   057
....................   output_low(PIN_OUTPUT_LED); 
005C:  BSF    03.5
005D:  BCF    06.2
005E:  BCF    03.5
005F:  BCF    06.2
....................   delay_us(889); 
0060:  MOVLW  07
0061:  MOVWF  2A
0062:  MOVLW  7E
0063:  MOVWF  2B
0064:  CALL   042
0065:  DECFSZ 2A,F
0066:  GOTO   062
.................... } 
0067:  RETURN
....................  
.................... //fonction bit à 0 
.................... void LED_0(void) 
.................... { 
....................   output_low(PIN_OUTPUT_LED); 
0068:  BSF    03.5
0069:  BCF    06.2
006A:  BCF    03.5
006B:  BCF    06.2
....................   delay_us(889); 
006C:  MOVLW  07
006D:  MOVWF  2A
006E:  MOVLW  7E
006F:  MOVWF  2B
0070:  CALL   042
0071:  DECFSZ 2A,F
0072:  GOTO   06E
....................   output_high(PIN_OUTPUT_LED); 
0073:  BSF    03.5
0074:  BCF    06.2
0075:  BCF    03.5
0076:  BSF    06.2
....................   delay_us(889); 
0077:  MOVLW  07
0078:  MOVWF  2A
0079:  MOVLW  7E
007A:  MOVWF  2B
007B:  CALL   042
007C:  DECFSZ 2A,F
007D:  GOTO   079
.................... } 
007E:  RETURN

Configuration Fuses:
   Word  1: 373A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
